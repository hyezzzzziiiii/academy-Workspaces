/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.40
 * Generated at: 2020-12-29 07:50:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._05;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.DriverManager;

public final class bookEdit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


String driver = "oracle.jdbc.OracleDriver";
String url = "jdbc:oracle:thin:@localhost:1521:xe";
String uid = "scott";
String pass = "tiger";
String subject = "";
int makeyear = 0; //int로 자료형을 지정해놨으므로 ""되면 error
int inprice = 0;
int outprice = 0;
String grade = "청소년 구매가능";

Connection con = null; 
PreparedStatement pstmt = null; 
ResultSet rs = null; 


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("  \r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("     \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

String booknum = request.getParameter("booknum");
try{
	Class.forName(driver); 
	con = DriverManager.getConnection(url, uid, pass);
	String sql = "select * from booklist where booknum= ?";
	pstmt = con.prepareStatement(sql);
	pstmt.setString(1, booknum);
	rs = pstmt.executeQuery();
	if(rs.next()){ // next는 boolean값 판단 rs객체에 접근해 true로 판단되면 값을 얻어옴
		subject = rs.getString("subject");
		makeyear = rs.getInt("makeyear");
		inprice = rs.getInt("inprice");
		outprice = rs.getInt("outprice");
		grade = rs.getString("grade");
	}
}catch(Exception e){
	e.printStackTrace();
}finally{
	try{
		if(pstmt!= null) pstmt.close();
		if(con!= null) con.close();
	}catch(Exception e){
		e.printStackTrace();}
}

      out.write("\r\n");
      out.write("<form method = \"get\" action = \"bookEdit_do.jsp\">\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr><td>제목</td>\r\n");
      out.write("\t\t\t<td><input type = \"text\" name = \"subject\" size = \"40\" value = \"");
      out.print(subject);
      out.write("\"></td></tr>\r\n");
      out.write("\t\t<tr><td>출판년도</td>\r\n");
      out.write("\t\t\t<td><input type = \"text\" name = \"makeyear\" size = \"20\" value = \"");
      out.print(makeyear);
      out.write("\"></td></tr>\r\n");
      out.write("\t\t<tr><td>입고가격</td>\r\n");
      out.write("\t\t\t<td><input type = \"text\" name = \"inprice\" size = \"20\" value = \"");
      out.print(inprice);
      out.write("\"></td></tr>\r\n");
      out.write("\t\t<tr><td>출고가격</td>\r\n");
      out.write("\t\t\t<td><input type = \"text\" name = \"outprice\" size = \"20\" value = \"");
      out.print(outprice);
      out.write("\"></td></tr>\r\n");
      out.write("\t\t<tr><td>등급</td><td>\r\n");
      out.write("\t\t<input type = \"radio\" name = \"grade\" value = \"전체\" checked\r\n");
      out.write("\t\t");
if(grade.equals("전체")){
      out.write("checked");
} 
      out.write("> 전체&nbsp;\r\n");
      out.write("\t\t<input type = \"radio\" name = \"grade\" value = \"성인전용\"\r\n");
      out.write("\t\t");
if(grade.equals("성인전용")){
      out.write("checked");
} 
      out.write("> 성인&nbsp;\r\n");
      out.write("\t\t<input type = \"radio\" name = \"grade\" value = \"청소년 구매가능\" \r\n");
      out.write("\t\t");
if(grade.equals("청소년 구매가능")){
      out.write("checked");
} 
      out.write(">청소년 &nbsp;\r\n");
      out.write("\t\t<input type = \"hidden\" name = \"booknum\" value = \"");
      out.print(booknum );
      out.write("\"> \r\n");
      out.write("\t\t<!-- 테이블 안 어느곳에든 넣어도 됨/ booknum이 보여질필요는 없으나 같이 전달이 되야하기 때문에  -->\r\n");
      out.write("\t\t</td></tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("<input type = \"submit\" value = \"전송\">\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
