package days08;

public class Array01 {

	public static void main(String[] args) {
		// 배열
		// 동일한 자료형의 연소된 집합
		// 동일한 이름 + 번호(첨자)로 다수개의 데이터를 저장할 수 있는 방법
		// 1. 다수개의 변수를 같은 이름으로 손쉽게 선언하여 사용가능
		// 2. 하나의 이름으로 다수개의 변수들을 제어할 수 있습니다.
		
		// 배열의 생성방법
		// 자료형[]배열 변수명
		int[]arr;
		// arr변수(배열의 이름)는 레퍼런스(참조) 변수입니다.
		// 레퍼런스 변수는 HEAP메모리 공간에 실제 데이터가 저장될 공간을 할당 받아야 사용할 수 있습니다.
		// 레퍼런스 변수 : 실제 데이터를 저장하는 변수가 아닌 실제데이터 저장 위치를 저장하는 변수입니다.
		// '저장할 데이터의 양이 기본자료형(int double 등) 하나로는 저장하기 힘들때 레퍼런스 변수를 사용합니다.'
		
		// new 연산자: 동적인 메모리를 생성하는 연산자
		
		// 프로그램의 구동 중에 HEAP메모리에 12Byte 공간을 생성하고 , 해당 위치값을 arr배열 변수에 대입합니다.
		arr = new int[3]; //3칸만들어짐
		// 둘을 합쳐서 int[] arr= new int[3]; 으로 선언하기도 합니다.

		// 배열의 각 공간에 값을 대입하는 방법
		// 인덱스(첨자)연산을 사용
		// 배열의 인덱스(첨자) : 시작은 0, 종료는 배열의 크기 -1
		// 배열 변수명[인덱스(첨자)] = 값;
		 arr[0]=10; // 배열의 1번째 요소에 값을 대입
		 arr[1]=20; // 배열의 1번째 요소에 값을 대입
		 arr[2]=30; // 배열의 1번째 요소에 값을 대입
		 
		 int i = 0;
		 arr[i] =30;
		 
		 i=1;
		 arr[i] =40;
		 arr[i+1] =50;
		 // 배열 내부의 요소 값을 추출하는 방법
		 // 배열 변수명 [인덱스]
		 System.out.printf("arr[0] = %d\n", arr[0]);
		 System.out.printf("arr[1] = %d\n", arr[1]);
		 System.out.printf("arr[2] = %d\n", arr[2]);
	}

}
